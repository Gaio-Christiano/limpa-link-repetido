import os # Importa o m√≥dulo 'os' para lidar com caminhos de arquivo e diret√≥rios

def limpar_e_salvar_links(caminho_completo_arquivo_entrada, caminho_completo_arquivo_saida):
    """
    Remove linhas em branco extras e links duplicados de um arquivo de texto,
    e salva o resultado em um NOVO arquivo.

    Args:
        caminho_completo_arquivo_entrada (str): O caminho COMPLETO para o arquivo de texto de ENTRADA
                                                 a ser processado (o arquivo original).
        caminho_completo_arquivo_saida (str): O caminho COMPLETO para o arquivo de SA√çDA onde os links limpos
                                              ser√£o salvos.
    """
    try:
        # 1. Verificar se o arquivo de entrada existe antes de tentar abri-lo
        # os.path.exists() verifica se o caminho fornecido existe no sistema de arquivos.
        if not os.path.exists(caminho_completo_arquivo_entrada):
            # Se o arquivo n√£o existir, levanta um erro FileNotFoundError com uma mensagem √∫til.
            raise FileNotFoundError(f"O arquivo de entrada '{caminho_completo_arquivo_entrada}' n√£o foi encontrado.")

        # 2. Abrir o arquivo original para leitura ('r' - read)
        # Usa o 'caminho_completo_arquivo_entrada' que foi passado para a fun√ß√£o.
        # 'encoding='utf-8'' √© importante para lidar com caracteres especiais corretamente.
        with open(caminho_completo_arquivo_entrada, 'r', encoding='utf-8') as f:
            linhas = f.readlines() # L√™ todas as linhas do arquivo e as armazena em uma lista.
                                   # Cada elemento da lista 'linhas' ser√° uma linha do arquivo,
                                   # incluindo a quebra de linha (\n) no final.

        # 3. Inicializar estruturas para armazenar links √∫nicos e controlar duplicatas
        links_unicos_ordenados = [] # Esta lista manter√° os links na ordem em que s√£o encontrados pela primeira vez.
                                    # √â importante para preservar a ordem original dos links √∫nicos.
        links_ja_vistos = set()     # Este √© um 'set' (conjunto). Conjuntos s√£o otimizados para
                                    # verificar rapidamente se um item j√° est√° presente (muito mais r√°pido que listas).
                                    # Usaremos isso para detectar links duplicados de forma eficiente.

        # 4. Processar cada linha do arquivo
        for linha in linhas:
            # 4.1. Remover espa√ßos em branco do in√≠cio e fim da linha
            # O m√©todo .strip() remove espa√ßos, tabula√ß√µes, quebras de linha (\n, \r) do come√ßo e fim.
            linha_limpa = linha.strip()

            # 4.2. Verificar se a linha n√£o est√° vazia ap√≥s a limpeza E se parece ser um link
            # Assumimos que um link v√°lido come√ßa com "http://" ou "https://".
            # Voc√™ pode ajustar essa condi√ß√£o se seus links tiverem outros padr√µes (ex: ftp://).
            if linha_limpa and (linha_limpa.startswith("http://") or linha_limpa.startswith("https://")):
                # 4.3. Verificar se o link j√° foi visto
                # Se 'linha_limpa' N√ÉO estiver no conjunto 'links_ja_vistos', significa que √© um link novo.
                if linha_limpa not in links_ja_vistos:
                    # 4.4. Adicionar o link √† lista de links √∫nicos (para manter a ordem)
                    links_unicos_ordenados.append(linha_limpa)
                    # 4.5. Adicionar o link ao conjunto de links j√° vistos (para controle de duplicatas)
                    links_ja_vistos.add(linha_limpa)

        # 5. Preparar o conte√∫do para escrita
        # O m√©todo .join() une os elementos da lista 'links_unicos_ordenados' em uma √∫nica string,
        # usando "\n" (quebra de linha) como separador entre eles.
        conteudo_para_escrever = "\n".join(links_unicos_ordenados)

        # 6. Criar e escrever no NOVO arquivo de sa√≠da
        # Abre um NOVO arquivo no modo de escrita ('w' - write), usando o caminho completo fornecido pelo usu√°rio.
        # Se o arquivo n√£o existir, ele ser√° criado. Se existir, seu conte√∫do ser√° sobrescrito.
        with open(caminho_completo_arquivo_saida, 'w', encoding='utf-8') as f:
            f.write(conteudo_para_escrever) # Escreve a string de links limpos no novo arquivo.

        # 7. Mensagens de sucesso para o usu√°rio
        print(f"\n‚úÖ Processamento conclu√≠do com sucesso!")
        print(f"üì¶ Arquivo original de entrada: '{caminho_completo_arquivo_entrada}' (n√£o modificado)")
        print(f"üìÑ Novo arquivo de sa√≠da gerado: '{caminho_completo_arquivo_saida}'")
        print(f"üìä {len(links_unicos_ordenados)} links √∫nicos foram salvos no novo arquivo.")

    except FileNotFoundError as e:
        # Captura o erro se o arquivo de entrada n√£o for encontrado.
        print(f"\n‚ùå Erro: {e}")
        print("Por favor, verifique se o caminho completo e o nome do arquivo de entrada est√£o corretos.")
    except Exception as e:
        # Captura qualquer outro erro inesperado que possa ocorrer durante o processo.
        print(f"\nüí• Ocorreu um erro inesperado: {e}")
        print("Por favor, verifique os caminhos e tente novamente.")

# --- Bloco Principal de Execu√ß√£o ---
# Este bloco de c√≥digo s√≥ ser√° executado quando o script for rodado diretamente.
if __name__ == "__main__":
    print("--- Ferramenta de Limpeza de Links ---")
    print("Por favor, insira os caminhos solicitados.")
    print("Dica: No Windows, voc√™ pode copiar o caminho de uma pasta na barra de endere√ßos do Explorador de Arquivos.")
    print("Lembre-se de incluir o nome do arquivo e sua extens√£o no caminho (ex: C:/pasta/arquivo.txt).\n")

    # Loop para solicitar o caminho do arquivo de entrada at√© que seja v√°lido
    while True:
        caminho_entrada = input("‚û°Ô∏è Digite o CAMINHO COMPLETO do arquivo de ENTRADA (com nome do arquivo): ")
        # O replace faz com que barras invertidas sejam convertidas para barras normais
        # para compatibilidade em todos os sistemas operacionais.
        caminho_entrada = caminho_entrada.replace('\\', '/')
        if os.path.isfile(caminho_entrada): # os.path.isfile() verifica se o caminho leva a um arquivo existente
            break # Sai do loop se o caminho for um arquivo v√°lido
        else:
            print("üö´ Caminho do arquivo de entrada inv√°lido ou arquivo n√£o encontrado. Por favor, tente novamente.")

    # Loop para solicitar o caminho do arquivo de sa√≠da at√© que seja v√°lido (ou um diret√≥rio v√°lido)
    while True:
        caminho_saida = input("‚û°Ô∏è Digite o CAMINHO COMPLETO para o NOVO arquivo de SA√çDA (com nome do arquivo, ex: C:/pasta/saida.txt): ")
        caminho_saida = caminho_saida.replace('\\', '/')
        # Separa o diret√≥rio e o nome do arquivo de sa√≠da para verificar se o diret√≥rio existe.
        diretorio_saida = os.path.dirname(caminho_saida)
        if not diretorio_saida: # Se n√£o houver diret√≥rio (apenas nome de arquivo), assume o diret√≥rio atual
            diretorio_saida = '.' # Representa o diret√≥rio atual
        
        if os.path.isdir(diretorio_saida): # os.path.isdir() verifica se o caminho leva a um diret√≥rio existente
            # Verifica se o nome do arquivo de sa√≠da √© v√°lido (n√£o √© um diret√≥rio, etc.)
            if os.path.basename(caminho_saida): # Verifica se o nome do arquivo n√£o est√° vazio
                break # Sai do loop se o diret√≥rio for v√°lido e o nome do arquivo existir
            else:
                print("üö´ Nome do arquivo de sa√≠da inv√°lido. Certifique-se de incluir o nome do arquivo (ex: saida.txt).")
        else:
            print("üö´ O diret√≥rio para o arquivo de sa√≠da n√£o existe. Por favor, crie-o ou forne√ßa um caminho v√°lido.")
            print(f"Diret√≥rio tentado: '{diretorio_saida}'")


    # Chama a fun√ß√£o principal com os caminhos fornecidos pelo usu√°rio.
    limpar_e_salvar_links(caminho_entrada, caminho_saida)



